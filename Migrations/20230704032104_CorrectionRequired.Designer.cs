// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using projectef;

#nullable disable

namespace Entity_Framework.Migrations
{
    [DbContext(typeof(TasksContext))]
    [Migration("20230704032104_CorrectionRequired")]
    partial class CorrectionRequired
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("projectef.Models.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("CategoryId");

                    b.ToTable("Category", (string)null);

                    b.HasData(
                        new
                        {
                            CategoryId = new Guid("f7d31d43-485b-4499-9502-97c3cf0c806d"),
                            Name = "Actividades Pendientes",
                            Weight = 20
                        },
                        new
                        {
                            CategoryId = new Guid("f7d31d43-485b-4499-9502-97c3cf0c8061"),
                            Name = "Actividades Personales",
                            Weight = 50
                        });
                });

            modelBuilder.Entity("projectef.Models.Task", b =>
                {
                    b.Property<Guid>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TaskPriority")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("TaskId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Task", (string)null);

                    b.HasData(
                        new
                        {
                            TaskId = new Guid("f7d31d43-485b-4499-9502-97c3cf0c8789"),
                            CategoryId = new Guid("f7d31d43-485b-4499-9502-97c3cf0c806d"),
                            CreationDate = new DateTime(2023, 7, 3, 22, 21, 4, 279, DateTimeKind.Local).AddTicks(2490),
                            TaskPriority = 1,
                            Title = "Pago servicios publicos"
                        },
                        new
                        {
                            TaskId = new Guid("f7d31d43-485b-4499-9502-97c3cf0c8780"),
                            CategoryId = new Guid("f7d31d43-485b-4499-9502-97c3cf0c806d"),
                            CreationDate = new DateTime(2023, 7, 3, 22, 21, 4, 279, DateTimeKind.Local).AddTicks(2520),
                            TaskPriority = 2,
                            Title = "Hacer la tarea de la U"
                        },
                        new
                        {
                            TaskId = new Guid("f7d31d43-485b-4499-9502-97c3cf0c8100"),
                            CategoryId = new Guid("f7d31d43-485b-4499-9502-97c3cf0c8061"),
                            CreationDate = new DateTime(2023, 7, 3, 22, 21, 4, 279, DateTimeKind.Local).AddTicks(2530),
                            TaskPriority = 1,
                            Title = "Sacar a zeus"
                        },
                        new
                        {
                            TaskId = new Guid("f7d31d43-485b-4499-9502-97c3cf0c81a1"),
                            CategoryId = new Guid("f7d31d43-485b-4499-9502-97c3cf0c8061"),
                            CreationDate = new DateTime(2023, 7, 3, 22, 21, 4, 279, DateTimeKind.Local).AddTicks(2530),
                            TaskPriority = 0,
                            Title = "Nose"
                        });
                });

            modelBuilder.Entity("projectef.Models.Task", b =>
                {
                    b.HasOne("projectef.Models.Category", "Category")
                        .WithMany("Tasks")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("projectef.Models.Category", b =>
                {
                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
